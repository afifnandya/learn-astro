import useHttp from "@/composable/useHttp";
import { API_MINOR_VERSION, DEFAULT_ERROR_MESSAGE } from "@/constants";

// Generated by https://quicktype.io

export interface GetRestaurantBySlug {
  data: Data;
  included: Included[];
  meta: Meta;
  success: boolean;
  message: null;
}

export interface Data {
  id: string;
  type: string;
  attributes: DataAttributes;
  relationships: Relationships;
}

export interface DataAttributes {
  lowestAycePrice: string;
  lowestPpPrice: string;
  lowestXpPrice: null;
  lowestHsPrice: null;
  lowestBfpPrice: null;
  lowestSmPrice: null;
  lowestHahPrice: null;
  pricePerPerson: {
    amount: string;
    currency: string;
    symbol: string;
    format: string;
  };
  priceAndPricingType: PriceAndPricingType;
  isDeleted: boolean;
  lat: string;
  lng: string;
  largestTable: number;
  branchId: number;
  minPartySize: number;
  name: string;
  names: {
    th: string;
    en: string;
  };
  slug: string;
  favorited: boolean;
  allowBooking: boolean;
  availability: string;
  reviewsScore: number;
  reviewsCount: number;
  mapLocation: string;
  promotedByHh: boolean;
  enableBigGroupFeature: boolean;
  location: string;
  primaryLocation: {
    id: number;
    name: string;
  };
  cuisine: string;
  primaryCuisine: {
    id: number;
    name: string;
  };
  imageCoverUrl: {
    thumb: string;
    large: string;
    square: string;
  };
  canonicalLink: string;
  lastBookingWasMade: string;
  totalCovers: number;
  timeSlots: {};
  reservationSystemOnly: boolean;
  breadcrumbs: {
    order: number;
    title: string;
    link: string;
  }[];
  address: string;
  parking: boolean;
  corkageCharge: string;
  openingHours: null;
  foodDetails: null;
  daysInAdvance: number;
  ambience: null;
  expiryDate: string;
  smallNote: null;
  acceptKids: boolean;
  selfPickupMessage: null;
  customText: null;
  recordGuests: boolean;
  bookingFlow: string;
  myMoobanVrLink: string;
  acceptVoucher: boolean;
  description: string;
  customSeats: any[];
  tags: any[];
  logoUrl: LogoURL;
  platform: string[];
  customSectionTitle: string;
  customSectionContent: string;
  availablePackageTypes: string[];
  reservationDurationInHours: string;
  openingHoursShort: string;
  weekdayOpeningHours: WeekdayOpeningHours;
  openingHoursV2: null;
  hashtags: {
    id: number;
    label: string;
    linkToGroupLandingPage: string;
  }[];
  videos: string[];
  locations: {
    id: number;
    title: string;
  }[];
  cuisines: {
    id: number;
    title: string;
  }[];
  jsonld: null;
  link: string;
  seo: {
    title: string;
    description: string;
    keywords: string;
  };
  linkToGroupLandingPage: string;
  gbPrimepayPublicKey: string;
  supportOrderNow: boolean;
  cookingTime: number;
  hasDeliveryPricingTier: boolean;
  phone: string;
  phoneForDelivery: string;
  covid19Rating: Covid19Rating;
}

export interface Covid19Rating {
  overallCleanliness: string;
  socialDistancing: string;
  staffProtection: string;
}

export interface LogoURL {
  medium: string;
  thumb: string;
}

export interface PriceAndPricingType {
  amount: number;
  currency: string;
  symbol: string;
  format: string;
  pricing_type: string;
}

export interface WeekdayOpeningHours {
  mon: string;
  tue: string;
  wed: string;
  thu: string;
  fri: string;
  sat: string;
  sun: string;
}

export interface Relationships {
  pictures: BloggerReviews;
  restaurantPackages: BloggerReviews;
  lastReviews: BloggerReviews;
  bloggerReviews: BloggerReviews;
}

export interface BloggerReviews {
  data: {
    id: string;
    type: string;
  }[];
}

export interface Included {
  id: string;
  type: string;
  attributes: {
    priority: number;
    caption: string;
    item: {
      url: string;
      thumb2x: {
        url: string;
      };
      thumb: {
        url: string;
      };
      thumbCover2x: {
        url: string;
      };
      thumbCover: {
        url: string;
      };
      thumbCoverSquare2x: {
        url: string;
      };
      thumbCoverSquare: {
        url: string;
      };
      bigCover: {
        url: string;
      };
      slideThumb2x: {
        url: string;
      };
      slideThumb: {
        url: string;
      };
      slideThumbSquare2x: {
        url: string;
      };
      slideThumbSquare: {
        url: string;
      };
    };
  };
}

export interface Meta {
  reviews: Reviews;
  criteoItem: {
    id: number;
    quantity: number;
    price: string;
  }[];
}

export interface Reviews {
  total: number;
  average: number;
  starsCount: {
    one: number;
    two: number;
    three: number;
    four: number;
    five: number;
  };
}

export async function getRestaurantBySlug({
  slug,
  accessToken,
}: {
  slug: string;
  accessToken?: string;
}): Promise<{
  isSuccess: boolean;
  message: string;
  data: null | GetRestaurantBySlug;
}> {
  const defaultErrorMessage = `${DEFAULT_ERROR_MESSAGE}, failed get restaurant data`;
  const url = `/restaurants/${slug}/slug.json`;
  const params = {
    includePackages: false,
    includePictures: true,
    previewMode: false,
    minorVersion: API_MINOR_VERSION,
    accessToken,
  };

  const { httpStatus, data, error } = await useHttp({
    url: url,
    params,
  });

  const response = data as GetRestaurantBySlug;

  if (error.message || httpStatus !== 200) {
    return {
      isSuccess: false,
      message: response.message || error.message || defaultErrorMessage,
      data: null,
    };
  }

  return {
    isSuccess: true,
    message: "",
    data: response,
  };
}
